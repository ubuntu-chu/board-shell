#
#	rcS
#

#rcS.define 需要根据根文件的实际情况进行配置
. /etc/board/rcS.define

#下面的配置为通用配置部分   注意要求应用程序的文件夹架构必须一致！
VERSION="v1.0.144"

#默认PATH文件定义
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$ETC_ENTRY_SHELL_PATH:/etc/board

#app分区
export APP_MOUNT_POINT=/opt
export APP_PARTION_NAME=app
export FLASH_DIR=/var/flash

#kernel分区
export KERNEL_PARTION_NAME=kernel

#gpio class路径
GPIO_CLASS_PATH=/sys/class/gpio
#/proc路径
PROC_APP_FILE_PATH=/proc/$COMPANY
#内核版本文件
PROC_KERN_VER_FILE=/proc/kernversion-itl
#应用程序路径
APP_ENTRY_PATH=/opt/$COMPANY

#系统命令行文件
SYS_CMDLINE_FILE=/proc/cmdline
#用于标识 当前是否处于恢复所用的文件系统中 若是 则会影响主机名
RECOVERY_KEY=recoverymode

#app 入口脚本目录
APP_ENTRY_SHELL_PATH=$APP_ENTRY_PATH/sbin
#app 入口脚本文件
APP_ENTRY_SHELL=itl-sys-proc
#app profile 文件路径
APP_PROFILE_PATH=$APP_ENTRY_PATH/etc/profile

#board 下脚本目录
BOARD_ENTRY_SHELL_PATH=/etc/board
BOARD_ENTRY_PRIVATE_SHELL_PATH=${BOARD_ENTRY_SHELL_PATH}/private
#proc内核模块名称
PROC_MODULE=proc_module

#vendor entry shell
ETC_ENTRY_SHELL_VENDOR_PROC_SYS=vendor-sys-proc
#挂载app分区脚本
MOUNT_APP_PARTION_SHELL=app-mount.sh
ETC_APP_ENTRY_SHELL=app-entry.sh

#通讯用文件
SHELL_COMM_FILE=/var/run/sys-regs
SHELL_PREV_DEFINE_SYS_FILE=/var/run/sys-pre-define-file
SHELL_PROC_FILE=/var/run/app-proc-file
SHELL_PROC_SYS_FILE=/var/run/sys-proc-file
SHELL_PRIV_FILE=/var/run/app-priv-file
SHELL_DEBUG_FILE=/var/run/app-debug-file
SHELL_PRIV_SYS_FILE=/var/run/sys-priv-file
SHELL_ERROR_SYS_FILE=/var/run/sys-error-file


#boardinfo file
BOARD_INFO_SRC_FILE="/etc/board/boardinfo.define"
export BOARD_INFO_FILE="/var/run/boardinfo"
PREV_DEFINE_KEY="pre-define"
PROJECT_KEY="project"
BOARD_TYPE_KEY="board_type"
CPU_ID_KEY="cpu_id"
BOOTLOADER_VER_KEY="bootloader_ver"
BOARD_ID_KEY="board_id"
BOARD_ID_FORCE_VALUE_KEY="board_id_force_value"
PROC_KEY="proc"
PROC_NONE_VALUE="proc_none"
PRIV_KEY="priv"
PRIV_NONE_VALUE="priv_none"
ERROR_KEY="error"
CPU_NAME_KEY="cpu_name"

#board_id为空时对应的boardinfo table中文本
BOARD_ID_NONE_TEXT=none
CPU_ID_NONE_TEXT=none

#network interfaces file
INTERFACES_SRC_FILE=$BOARD_INFO_FILE
INTERFACES_DEST_FILE="/etc/network/interfaces"

#hostname file
HOSTNAME_SRC_FILE=$BOARD_INFO_FILE
HOSTNAME_DEST_FILE="/etc/hostname"

#some key prefix define
NETWORK_KEY="network"
HOSTNAME_KEY="host_name"
CPU_ID_FORCE_VALUE_KEY="cpu_id_force_value"
BUILD_TIME_KEY="rootfs_img_build_time"

MAC_OUI_KEY="mac_oui"
MAC_BATCH_SEQ_KEY="mac_batch_seq"
MAC_VALUE_KEY="XX"

#cpu name define
CPU_NAME=""
CPU_ID=""

#proc line value define
PROC_LINE=""
PROC_LINE_VALUE=""

#如果发现错误情况 打印错误信息后 直接退出进程
proc_line() 
{
	if [ $# -lt 2 ]; then
		echo "************$0 param cnt must >= 2************"
		exit 2
	fi

	#此处非严格的匹配
	PROC_LINE=`grep "^ *$1=" $2`
	if [ -z "$PROC_LINE" ]; then
		echo "*******************************$key do not exist!please check $2 setting!*******************************"
		exit 1
	fi
#PROC_LINE_VALUE=${PROC_LINE#$key=}
	PROC_LINE_VALUE=`echo $PROC_LINE|awk 'BEGIN{FS="="}{print $2}'`
	if [ $# -eq 3 ]; then
		echo $PROC_LINE_VALUE >> $3
	fi
}

#如果发现错误情况 不退出进程 而是返回
proc_line_return() 
{
	if [ $# -lt 2 ]; then
		debug echo "************$0 param cnt must >= 2************"
		return 2
	fi

	#此处非严格的匹配
	PROC_LINE=`grep "^ *$1=" $2`
	if [ -z "$PROC_LINE" ]; then
		debug echo "*******************************$key do not exist!please check $2 setting!*******************************"
		return 1
	fi
#PROC_LINE_VALUE=${PROC_LINE#$key=}
	PROC_LINE_VALUE=`echo $PROC_LINE|awk 'BEGIN{FS="="}{print $2}'`
	if [ $# -eq 3 ]; then
		echo $PROC_LINE_VALUE >> $3
	fi

	return 0
}

#处理/proc/cmdline文件信息
proc_cmdline() 
{
	if [ $# -lt 1 ]; then
		debug echo "************$0 param cnt must >= 1************"
		return 2
	fi

	PROC_LINE=`cat $SYS_CMDLINE_FILE |tr " " "\n"|grep $1`
	if [ -z "$PROC_LINE" ]; then
		debug echo "*******$1 do not exsit in $SYS_CMDLINE_FILE! plese check uboot!*******"
		return 1
	fi

	return 0
}

proc_cmdline_value() 
{
	proc_cmdline $1
	if [ $? -ne 0 ]; then
		return 1
	fi

	PROC_LINE_VALUE=`echo $PROC_LINE|awk 'BEGIN{FS="="}{print $2}'`
	if [ -z "$PROC_LINE_VALUE" ]; then
		debug echo "*******$1 do not have value in $SYS_CMDLINE_FILE! plese check uboot!*******"
		return 3
	fi

	return 0
}

debug(){
		[ $DEBUG = 1  ] && $@

}

section_content_get()
{
	#awk '/^'${1}'=\{/,/^\}/ {print $0}' "${2}"\
	#	| sed '1d;$d;s/^[[:space:]]*//' | sed 's/ *= \+\(\w\)/=\1/'\
	#	| awk '{print $0 >> "'"${3}"'"}'
	#去除=号左右的空格
	awk '/^'${1}'=\{/,/^\}/ {print $0}' "${2}"\
		| sed '1d;$d' | sed "s/^[[:space:]]*//" | sed "s/ *= */=/"\
		| awk '{print $0 >> "'"${3}"'"}'
}

file_lines_proc()
{
	#去除首部 尾部的空格  以及=号前后的空格
	#将空格替换为_
	sed -i "s/^[[:space:]]*//;s/ *= */=/;s/[[:space:]]*$//;s/[[:space:]]/_/g" $1
}

